// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
  shadowDatabaseUrl = env("POSTGRES_URL_NON_POOLING")

}


model Views {
  slug String @id @db.Text
  count BigInt @default(1)
}

model SkillCategory {
  id BigInt @id @default(autoincrement())
  name String @db.Text
  skills_in_category Skill[]

  @@map(name: "skills_in_category")
}

model Skill{
  id  BigInt @id @default(autoincrement())
  name  String @db.Text
  endorsements Endorsement[]
  skill_category SkillCategory? @relation(fields: [skill_category_id], references: [id])
  skill_category_id BigInt?

  @@unique([name])
  @@map(name:"Skills")

}

model Endorsement{
  id  BigInt @id @default(autoincrement())
  skill Skill? @relation(fields: [skill_id], references: [id])
  skill_id BigInt?
  updated_at DateTime @default(now()) @db.Date

  user User? @relation(fields: [userId], references: [id])
  userId  String?
  @@map(name: "endorsements")

}

model Account {
  id                       String  @id @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String?
  access_token             String? @db.Text
  refresh_token_expires_in Int?
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String? @db.Text
  session_state            String?
  oauth_token_secret       String?
  oauth_token              String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map(name: "accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map(name: "sessions")
}

model User {
  id            String        @id @default(cuid())
  name          String?
  email         String?       @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  endorsements  Endorsement[]
  @@map(name: "users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map(name: "verification_tokens")
}